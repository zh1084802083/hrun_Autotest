# NOTE: Generated By HttpRunner v3.1.6
# FROM: testcases/Buildings/cubicle/cubicle_statistics.yml


import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase

from testcases.Buildings.cubicle.cubicles_test import TestCaseCubicles as Cubicles


class TestCaseCubicleStatistics(HttpRunner):

    config = (
        Config("获取工位列表--工位数据概览")
        .variables(**{"access_token": "${get_token()}"})
        .verify(False)
        .export(
            *[
                "building_id",
                "total_cubicle",
                "available_cubicle",
                "unavailable_cubicle",
            ]
        )
    )

    teststeps = [
        Step(
            RunTestCase("获取工位列表")
            .call(Cubicles)
            .export(
                *[
                    "total_cubicle",
                    "building_id",
                    "available_cubicle",
                    "unavailable_cubicle",
                ]
            )
        ),
        Step(
            RunRequest("工位数据概览")
            .get("${ENV(api_url)}/buildings/room/statistics")
            .with_params(
                **{
                    "buildingIds": "$building_id",
                    "loadOccupancyInfo": "false",
                    "loadRentingInfo": "false",
                    "spaceType": "CUBICLE",
                    "spaceTypes": "CUBICLE",
                }
            )
            .with_headers(**{"authorization": "Bearer $access_token"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.numberOfManagement", "${cubileSize()}")
            .assert_equal("body.roomCount", "${cubicleRoom_count()}")
            .assert_equal("body.cubicleCount", "$total_cubicle")
        ),
        Step(
            RunRequest("可招商工位数据概览")
            .get("${ENV(api_url)}/buildings/room/statistics")
            .with_params(
                **{
                    "buildingIds": "$building_id",
                    "loadOccupancyInfo": "false",
                    "loadRentingInfo": "false",
                    "spaceType": "CUBICLE",
                    "spaceTypes": "CUBICLE",
                    "available": True,
                }
            )
            .with_headers(**{"authorization": "Bearer $access_token"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.numberOfManagement", "${available_cubicleSize()}")
            .assert_equal("body.roomCount", "${available_cubicleCount()}")
            .assert_equal("body.cubicleCount", "$available_cubicle")
        ),
        Step(
            RunRequest("不可招商工位数据概览")
            .get("${ENV(api_url)}/buildings/room/statistics")
            .with_params(
                **{
                    "buildingIds": "$building_id",
                    "loadOccupancyInfo": "false",
                    "loadRentingInfo": "false",
                    "spaceType": "CUBICLE",
                    "spaceTypes": "CUBICLE",
                    "available": False,
                }
            )
            .with_headers(**{"authorization": "Bearer $access_token"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal("body.numberOfManagement", "${unavailable_cubicle_Size()}")
            .assert_equal("body.roomCount", "${unavailable_cubicle_Count()}")
            .assert_equal("body.cubicleCount", "$unavailable_cubicle")
        ),
        Step(
            RunRequest("工位数据概览-按工位编号查询")
            .get("${ENV(api_url)}/buildings/room/statistics")
            .with_params(
                **{
                    "buildingIds": "$building_id",
                    "loadOccupancyInfo": "false",
                    "loadRentingInfo": "false",
                    "spaceType": "CUBICLE",
                    "spaceTypes": "CUBICLE",
                    "keyword": 1,
                }
            )
            .with_headers(**{"authorization": "Bearer $access_token"})
            .validate()
            .assert_equal("status_code", 200)
        ),
    ]


if __name__ == "__main__":
    TestCaseCubicleStatistics().test_start()
